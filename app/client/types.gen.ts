// This file is auto-generated by @hey-api/openapi-ts

export type BodyLogin = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type ClienteCreate = {
    nome: string;
    email: string;
    categoria: string;
    endereco: string;
};

export type ClientePublic = {
    nome: string;
    email: string;
    categoria: string;
    endereco: string;
    id: number;
};

export type CompraCreate = {
    data_compra: string;
    valor: number;
    categoria: string;
    fornecedor_id: number;
};

export type CompraPublic = {
    data_compra: string;
    valor: number;
    categoria: string;
    id: number;
    fornecedor: FornecedorPublic;
};

export type FornecedorCreate = {
    nome: string;
};

export type FornecedorPublic = {
    nome: string;
    id: number;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    preco_unitario: number;
    quantidade: number;
    produto_id: number;
};

export type ItemPublic = {
    preco_unitario: number;
    quantidade: number;
    id: number;
    produto: ProdutoPublic;
};

export type ProdutoCreate = {
    nome: string;
    peso_em_gramas: number;
};

export type ProdutoPublic = {
    nome: string;
    peso_em_gramas: number;
    id: number;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    id: number;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type VendaCreate = {
    data_venda: string;
    data_pagamento?: string | null;
    cliente_id: number;
    items: Array<ItemCreate>;
};

export type VendaPublic = {
    data_venda: string;
    data_pagamento?: string | null;
    id: number;
    items: Array<ItemPublic>;
    cliente: ClientePublic;
};

export type ReadClientesData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        skip?: number;
        limit?: number;
    };
    url: '/clientes';
};

export type ReadClientesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadClientesError = ReadClientesErrors[keyof ReadClientesErrors];

export type ReadClientesResponses = {
    /**
     * Successful Response
     */
    200: Array<ClientePublic>;
};

export type ReadClientesResponse = ReadClientesResponses[keyof ReadClientesResponses];

export type CreateClienteData = {
    body: ClienteCreate;
    path?: never;
    query?: never;
    url: '/clientes';
};

export type CreateClienteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateClienteError = CreateClienteErrors[keyof CreateClienteErrors];

export type CreateClienteResponses = {
    /**
     * Successful Response
     */
    200: ClientePublic;
};

export type CreateClienteResponse = CreateClienteResponses[keyof CreateClienteResponses];

export type CountClientesData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
    };
    url: '/clientes/count';
};

export type CountClientesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CountClientesError = CountClientesErrors[keyof CountClientesErrors];

export type CountClientesResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CountClientesResponse = CountClientesResponses[keyof CountClientesResponses];

export type DeleteClienteData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/clientes/{id}';
};

export type DeleteClienteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteClienteError = DeleteClienteErrors[keyof DeleteClienteErrors];

export type DeleteClienteResponses = {
    /**
     * Successful Response
     */
    200: ClientePublic;
};

export type DeleteClienteResponse = DeleteClienteResponses[keyof DeleteClienteResponses];

export type ReadClienteByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/clientes/{id}';
};

export type ReadClienteByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadClienteByIdError = ReadClienteByIdErrors[keyof ReadClienteByIdErrors];

export type ReadClienteByIdResponses = {
    /**
     * Successful Response
     */
    200: ClientePublic;
};

export type ReadClienteByIdResponse = ReadClienteByIdResponses[keyof ReadClienteByIdResponses];

export type ReadComprasData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        skip?: number;
        limit?: number;
    };
    url: '/compras';
};

export type ReadComprasErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadComprasError = ReadComprasErrors[keyof ReadComprasErrors];

export type ReadComprasResponses = {
    /**
     * Successful Response
     */
    200: Array<CompraPublic>;
};

export type ReadComprasResponse = ReadComprasResponses[keyof ReadComprasResponses];

export type CreateCompraData = {
    body: CompraCreate;
    path?: never;
    query?: never;
    url: '/compras';
};

export type CreateCompraErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCompraError = CreateCompraErrors[keyof CreateCompraErrors];

export type CreateCompraResponses = {
    /**
     * Successful Response
     */
    200: CompraPublic;
};

export type CreateCompraResponse = CreateCompraResponses[keyof CreateCompraResponses];

export type CountComprasData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
    };
    url: '/compras/count';
};

export type CountComprasErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CountComprasError = CountComprasErrors[keyof CountComprasErrors];

export type CountComprasResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CountComprasResponse = CountComprasResponses[keyof CountComprasResponses];

export type ReadCompraByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/compras/{id}';
};

export type ReadCompraByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadCompraByIdError = ReadCompraByIdErrors[keyof ReadCompraByIdErrors];

export type ReadCompraByIdResponses = {
    /**
     * Successful Response
     */
    200: CompraPublic;
};

export type ReadCompraByIdResponse = ReadCompraByIdResponses[keyof ReadCompraByIdResponses];

export type ReadFornecedoresData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        skip?: number;
        limit?: number;
    };
    url: '/fornecedores';
};

export type ReadFornecedoresErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadFornecedoresError = ReadFornecedoresErrors[keyof ReadFornecedoresErrors];

export type ReadFornecedoresResponses = {
    /**
     * Successful Response
     */
    200: Array<FornecedorPublic>;
};

export type ReadFornecedoresResponse = ReadFornecedoresResponses[keyof ReadFornecedoresResponses];

export type CreateFornecedorData = {
    body: FornecedorCreate;
    path?: never;
    query?: never;
    url: '/fornecedores';
};

export type CreateFornecedorErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateFornecedorError = CreateFornecedorErrors[keyof CreateFornecedorErrors];

export type CreateFornecedorResponses = {
    /**
     * Successful Response
     */
    200: FornecedorPublic;
};

export type CreateFornecedorResponse = CreateFornecedorResponses[keyof CreateFornecedorResponses];

export type CountFornecedoresData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
    };
    url: '/fornecedores/count';
};

export type CountFornecedoresErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CountFornecedoresError = CountFornecedoresErrors[keyof CountFornecedoresErrors];

export type CountFornecedoresResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CountFornecedoresResponse = CountFornecedoresResponses[keyof CountFornecedoresResponses];

export type DeleteFornecedorData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/fornecedores/{id}';
};

export type DeleteFornecedorErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFornecedorError = DeleteFornecedorErrors[keyof DeleteFornecedorErrors];

export type DeleteFornecedorResponses = {
    /**
     * Successful Response
     */
    200: FornecedorPublic;
};

export type DeleteFornecedorResponse = DeleteFornecedorResponses[keyof DeleteFornecedorResponses];

export type ReadFornecedorByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/fornecedores/{id}';
};

export type ReadFornecedorByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadFornecedorByIdError = ReadFornecedorByIdErrors[keyof ReadFornecedorByIdErrors];

export type ReadFornecedorByIdResponses = {
    /**
     * Successful Response
     */
    200: FornecedorPublic;
};

export type ReadFornecedorByIdResponse = ReadFornecedorByIdResponses[keyof ReadFornecedorByIdResponses];

export type ReadProdutosData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        skip?: number;
        limit?: number;
    };
    url: '/produtos';
};

export type ReadProdutosErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProdutosError = ReadProdutosErrors[keyof ReadProdutosErrors];

export type ReadProdutosResponses = {
    /**
     * Successful Response
     */
    200: Array<ProdutoPublic>;
};

export type ReadProdutosResponse = ReadProdutosResponses[keyof ReadProdutosResponses];

export type CreateProdutoData = {
    body: ProdutoCreate;
    path?: never;
    query?: never;
    url: '/produtos';
};

export type CreateProdutoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProdutoError = CreateProdutoErrors[keyof CreateProdutoErrors];

export type CreateProdutoResponses = {
    /**
     * Successful Response
     */
    200: ProdutoPublic;
};

export type CreateProdutoResponse = CreateProdutoResponses[keyof CreateProdutoResponses];

export type CountProdutosData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
    };
    url: '/produtos/count';
};

export type CountProdutosErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CountProdutosError = CountProdutosErrors[keyof CountProdutosErrors];

export type CountProdutosResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CountProdutosResponse = CountProdutosResponses[keyof CountProdutosResponses];

export type DeleteProdutoData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/produtos/{id}';
};

export type DeleteProdutoErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProdutoError = DeleteProdutoErrors[keyof DeleteProdutoErrors];

export type DeleteProdutoResponses = {
    /**
     * Successful Response
     */
    200: ProdutoPublic;
};

export type DeleteProdutoResponse = DeleteProdutoResponses[keyof DeleteProdutoResponses];

export type ReadProdutoByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/produtos/{id}';
};

export type ReadProdutoByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadProdutoByIdError = ReadProdutoByIdErrors[keyof ReadProdutoByIdErrors];

export type ReadProdutoByIdResponses = {
    /**
     * Successful Response
     */
    200: ProdutoPublic;
};

export type ReadProdutoByIdResponse = ReadProdutoByIdResponses[keyof ReadProdutoByIdResponses];

export type ReadVendasData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
        skip?: number;
        limit?: number;
    };
    url: '/vendas';
};

export type ReadVendasErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadVendasError = ReadVendasErrors[keyof ReadVendasErrors];

export type ReadVendasResponses = {
    /**
     * Successful Response
     */
    200: Array<VendaPublic>;
};

export type ReadVendasResponse = ReadVendasResponses[keyof ReadVendasResponses];

export type CreateVendaData = {
    body: VendaCreate;
    path?: never;
    query?: never;
    url: '/vendas';
};

export type CreateVendaErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateVendaError = CreateVendaErrors[keyof CreateVendaErrors];

export type CreateVendaResponses = {
    /**
     * Successful Response
     */
    200: VendaPublic;
};

export type CreateVendaResponse = CreateVendaResponses[keyof CreateVendaResponses];

export type CountVendasData = {
    body?: never;
    path?: never;
    query?: {
        query?: string | null;
    };
    url: '/vendas/count';
};

export type CountVendasErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CountVendasError = CountVendasErrors[keyof CountVendasErrors];

export type CountVendasResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CountVendasResponse = CountVendasResponses[keyof CountVendasResponses];

export type ReadVendaByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/vendas/{id}';
};

export type ReadVendaByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadVendaByIdError = ReadVendaByIdErrors[keyof ReadVendaByIdErrors];

export type ReadVendaByIdResponses = {
    /**
     * Successful Response
     */
    200: VendaPublic;
};

export type ReadVendaByIdResponse = ReadVendaByIdResponses[keyof ReadVendaByIdResponses];

export type LoginData = {
    body: BodyLogin;
    path?: never;
    query?: never;
    url: '/login/access-token';
};

export type LoginErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/login/test-token';
};

export type GetCurrentUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];