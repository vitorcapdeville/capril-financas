// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { ReadClientesClientesGetData, ReadClientesClientesGetResponse, ReadClientesClientesGetError, CadastrarClienteClientesPostData, CadastrarClienteClientesPostResponse, CadastrarClienteClientesPostError, DeleteClienteClientesClienteIdDeleteData, DeleteClienteClientesClienteIdDeleteResponse, DeleteClienteClientesClienteIdDeleteError, ReadClienteClientesClienteIdGetData, ReadClienteClientesClienteIdGetResponse, ReadClienteClientesClienteIdGetError, ReadComprasComprasGetData, ReadComprasComprasGetResponse, ReadComprasComprasGetError, CadastrarCompraComprasPostData, CadastrarCompraComprasPostResponse, CadastrarCompraComprasPostError, ReadCompraComprasCompraIdGetData, ReadCompraComprasCompraIdGetResponse, ReadCompraComprasCompraIdGetError, ReadFornecedoresFornecedoresGetData, ReadFornecedoresFornecedoresGetResponse, ReadFornecedoresFornecedoresGetError, CadastrarFornecedorFornecedoresPostData, CadastrarFornecedorFornecedoresPostResponse, CadastrarFornecedorFornecedoresPostError, DeleteFornecedorFornecedoresFornecedorIdDeleteData, DeleteFornecedorFornecedoresFornecedorIdDeleteResponse, DeleteFornecedorFornecedoresFornecedorIdDeleteError, ReadFornecedorFornecedoresFornecedorIdGetData, ReadFornecedorFornecedoresFornecedorIdGetResponse, ReadFornecedorFornecedoresFornecedorIdGetError, ReadProdutosProdutosGetData, ReadProdutosProdutosGetResponse, ReadProdutosProdutosGetError, CadastrarProdutoProdutosPostData, CadastrarProdutoProdutosPostResponse, CadastrarProdutoProdutosPostError, DeleteProdutoProdutosProdutoIdDeleteData, DeleteProdutoProdutosProdutoIdDeleteResponse, DeleteProdutoProdutosProdutoIdDeleteError, ReadProdutoProdutosProdutoIdGetData, ReadProdutoProdutosProdutoIdGetResponse, ReadProdutoProdutosProdutoIdGetError, ReadVendasVendasGetData, ReadVendasVendasGetResponse, ReadVendasVendasGetError, CadastrarVendaVendasPostData, CadastrarVendaVendasPostResponse, CadastrarVendaVendasPostError, ReadVendaVendasVendaIdGetData, ReadVendaVendasVendaIdGetResponse, ReadVendaVendasVendaIdGetError, LoginAccessTokenLoginAccessTokenPostData, LoginAccessTokenLoginAccessTokenPostResponse, LoginAccessTokenLoginAccessTokenPostError, TestTokenLoginTestTokenPostData, TestTokenLoginTestTokenPostResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Read Clientes
 */
export const readClientesClientesGet = <ThrowOnError extends boolean = false>(options?: Options<ReadClientesClientesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadClientesClientesGetResponse, ReadClientesClientesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes',
        ...options
    });
};

/**
 * Cadastrar Cliente
 */
export const cadastrarClienteClientesPost = <ThrowOnError extends boolean = false>(options: Options<CadastrarClienteClientesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CadastrarClienteClientesPostResponse, CadastrarClienteClientesPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Cliente
 */
export const deleteClienteClientesClienteIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteClienteClientesClienteIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteClienteClientesClienteIdDeleteResponse, DeleteClienteClientesClienteIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes/{cliente_id}',
        ...options
    });
};

/**
 * Read Cliente
 */
export const readClienteClientesClienteIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadClienteClientesClienteIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadClienteClientesClienteIdGetResponse, ReadClienteClientesClienteIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes/{cliente_id}',
        ...options
    });
};

/**
 * Read Compras
 */
export const readComprasComprasGet = <ThrowOnError extends boolean = false>(options?: Options<ReadComprasComprasGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadComprasComprasGetResponse, ReadComprasComprasGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras',
        ...options
    });
};

/**
 * Cadastrar Compra
 */
export const cadastrarCompraComprasPost = <ThrowOnError extends boolean = false>(options: Options<CadastrarCompraComprasPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CadastrarCompraComprasPostResponse, CadastrarCompraComprasPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Compra
 */
export const readCompraComprasCompraIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadCompraComprasCompraIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadCompraComprasCompraIdGetResponse, ReadCompraComprasCompraIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras/{compra_id}',
        ...options
    });
};

/**
 * Read Fornecedores
 */
export const readFornecedoresFornecedoresGet = <ThrowOnError extends boolean = false>(options?: Options<ReadFornecedoresFornecedoresGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadFornecedoresFornecedoresGetResponse, ReadFornecedoresFornecedoresGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores',
        ...options
    });
};

/**
 * Cadastrar Fornecedor
 */
export const cadastrarFornecedorFornecedoresPost = <ThrowOnError extends boolean = false>(options: Options<CadastrarFornecedorFornecedoresPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CadastrarFornecedorFornecedoresPostResponse, CadastrarFornecedorFornecedoresPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Fornecedor
 */
export const deleteFornecedorFornecedoresFornecedorIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFornecedorFornecedoresFornecedorIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFornecedorFornecedoresFornecedorIdDeleteResponse, DeleteFornecedorFornecedoresFornecedorIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores/{fornecedor_id}',
        ...options
    });
};

/**
 * Read Fornecedor
 */
export const readFornecedorFornecedoresFornecedorIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadFornecedorFornecedoresFornecedorIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadFornecedorFornecedoresFornecedorIdGetResponse, ReadFornecedorFornecedoresFornecedorIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores/{fornecedor_id}',
        ...options
    });
};

/**
 * Read Produtos
 */
export const readProdutosProdutosGet = <ThrowOnError extends boolean = false>(options?: Options<ReadProdutosProdutosGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadProdutosProdutosGetResponse, ReadProdutosProdutosGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos',
        ...options
    });
};

/**
 * Cadastrar Produto
 */
export const cadastrarProdutoProdutosPost = <ThrowOnError extends boolean = false>(options: Options<CadastrarProdutoProdutosPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CadastrarProdutoProdutosPostResponse, CadastrarProdutoProdutosPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Produto
 */
export const deleteProdutoProdutosProdutoIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProdutoProdutosProdutoIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProdutoProdutosProdutoIdDeleteResponse, DeleteProdutoProdutosProdutoIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos/{produto_id}',
        ...options
    });
};

/**
 * Read Produto
 */
export const readProdutoProdutosProdutoIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadProdutoProdutosProdutoIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadProdutoProdutosProdutoIdGetResponse, ReadProdutoProdutosProdutoIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos/{produto_id}',
        ...options
    });
};

/**
 * Read Vendas
 */
export const readVendasVendasGet = <ThrowOnError extends boolean = false>(options?: Options<ReadVendasVendasGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadVendasVendasGetResponse, ReadVendasVendasGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas',
        ...options
    });
};

/**
 * Cadastrar Venda
 */
export const cadastrarVendaVendasPost = <ThrowOnError extends boolean = false>(options: Options<CadastrarVendaVendasPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CadastrarVendaVendasPostResponse, CadastrarVendaVendasPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Venda
 */
export const readVendaVendasVendaIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadVendaVendasVendaIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadVendaVendasVendaIdGetResponse, ReadVendaVendasVendaIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas/{venda_id}',
        ...options
    });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessTokenLoginAccessTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenLoginAccessTokenPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginAccessTokenLoginAccessTokenPostResponse, LoginAccessTokenLoginAccessTokenPostError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Test Token
 * Test access token
 */
export const testTokenLoginTestTokenPost = <ThrowOnError extends boolean = false>(options?: Options<TestTokenLoginTestTokenPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<TestTokenLoginTestTokenPostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/login/test-token',
        ...options
    });
};