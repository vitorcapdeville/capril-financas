// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-next';
import type { ReadClientesData, ReadClientesResponse, ReadClientesError, CreateClienteData, CreateClienteResponse, CreateClienteError, CountClientesData, CountClientesResponse, CountClientesError, DeleteClienteData, DeleteClienteResponse, DeleteClienteError, ReadClienteByIdData, ReadClienteByIdResponse, ReadClienteByIdError, ReadComprasData, ReadComprasResponse, ReadComprasError, CreateCompraData, CreateCompraResponse, CreateCompraError, CountComprasData, CountComprasResponse, CountComprasError, DeleteCompraData, DeleteCompraError, ReadCompraByIdData, ReadCompraByIdResponse, ReadCompraByIdError, ReadFornecedoresData, ReadFornecedoresResponse, ReadFornecedoresError, CreateFornecedorData, CreateFornecedorResponse, CreateFornecedorError, CountFornecedoresData, CountFornecedoresResponse, CountFornecedoresError, DeleteFornecedorData, DeleteFornecedorResponse, DeleteFornecedorError, ReadFornecedorByIdData, ReadFornecedorByIdResponse, ReadFornecedorByIdError, ReadProdutosData, ReadProdutosResponse, ReadProdutosError, CreateProdutoData, CreateProdutoResponse, CreateProdutoError, CountProdutosData, CountProdutosResponse, CountProdutosError, DeleteProdutoData, DeleteProdutoResponse, DeleteProdutoError, ReadProdutoByIdData, ReadProdutoByIdResponse, ReadProdutoByIdError, ReadVendasData, ReadVendasResponse, ReadVendasError, CreateVendaData, CreateVendaResponse, CreateVendaError, CountVendasData, CountVendasResponse, CountVendasError, ReadVendaByIdData, ReadVendaByIdResponse, ReadVendaByIdError, LoginData, LoginResponse, LoginError, GetCurrentUserData, GetCurrentUserResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Read Clientes
 */
export const readClientes = <ThrowOnError extends boolean = false>(options?: Options<ReadClientesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadClientesResponse, ReadClientesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes',
        ...options
    });
};

/**
 * Cadastrar Cliente
 */
export const createCliente = <ThrowOnError extends boolean = false>(options: Options<CreateClienteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateClienteResponse, CreateClienteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Count Clientes
 */
export const countClientes = <ThrowOnError extends boolean = false>(options?: Options<CountClientesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CountClientesResponse, CountClientesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes/count',
        ...options
    });
};

/**
 * Delete Cliente
 */
export const deleteCliente = <ThrowOnError extends boolean = false>(options: Options<DeleteClienteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteClienteResponse, DeleteClienteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes/{id}',
        ...options
    });
};

/**
 * Read Cliente
 */
export const readClienteById = <ThrowOnError extends boolean = false>(options: Options<ReadClienteByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadClienteByIdResponse, ReadClienteByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clientes/{id}',
        ...options
    });
};

/**
 * Read Compras
 */
export const readCompras = <ThrowOnError extends boolean = false>(options?: Options<ReadComprasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadComprasResponse, ReadComprasError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras',
        ...options
    });
};

/**
 * Cadastrar Compra
 */
export const createCompra = <ThrowOnError extends boolean = false>(options: Options<CreateCompraData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCompraResponse, CreateCompraError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Count Compras
 */
export const countCompras = <ThrowOnError extends boolean = false>(options?: Options<CountComprasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CountComprasResponse, CountComprasError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras/count',
        ...options
    });
};

/**
 * Delete Compra
 */
export const deleteCompra = <ThrowOnError extends boolean = false>(options: Options<DeleteCompraData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteCompraError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras/{id}',
        ...options
    });
};

/**
 * Read Compra
 */
export const readCompraById = <ThrowOnError extends boolean = false>(options: Options<ReadCompraByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadCompraByIdResponse, ReadCompraByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/compras/{id}',
        ...options
    });
};

/**
 * Read Fornecedores
 */
export const readFornecedores = <ThrowOnError extends boolean = false>(options?: Options<ReadFornecedoresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadFornecedoresResponse, ReadFornecedoresError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores',
        ...options
    });
};

/**
 * Cadastrar Fornecedor
 */
export const createFornecedor = <ThrowOnError extends boolean = false>(options: Options<CreateFornecedorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFornecedorResponse, CreateFornecedorError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Count Fornecedores
 */
export const countFornecedores = <ThrowOnError extends boolean = false>(options?: Options<CountFornecedoresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CountFornecedoresResponse, CountFornecedoresError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores/count',
        ...options
    });
};

/**
 * Delete Fornecedor
 */
export const deleteFornecedor = <ThrowOnError extends boolean = false>(options: Options<DeleteFornecedorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFornecedorResponse, DeleteFornecedorError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores/{id}',
        ...options
    });
};

/**
 * Read Fornecedor
 */
export const readFornecedorById = <ThrowOnError extends boolean = false>(options: Options<ReadFornecedorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadFornecedorByIdResponse, ReadFornecedorByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/fornecedores/{id}',
        ...options
    });
};

/**
 * Read Produtos
 */
export const readProdutos = <ThrowOnError extends boolean = false>(options?: Options<ReadProdutosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadProdutosResponse, ReadProdutosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos',
        ...options
    });
};

/**
 * Cadastrar Produto
 */
export const createProduto = <ThrowOnError extends boolean = false>(options: Options<CreateProdutoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProdutoResponse, CreateProdutoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Count Produtos
 */
export const countProdutos = <ThrowOnError extends boolean = false>(options?: Options<CountProdutosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CountProdutosResponse, CountProdutosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos/count',
        ...options
    });
};

/**
 * Delete Produto
 */
export const deleteProduto = <ThrowOnError extends boolean = false>(options: Options<DeleteProdutoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProdutoResponse, DeleteProdutoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos/{id}',
        ...options
    });
};

/**
 * Read Produto
 */
export const readProdutoById = <ThrowOnError extends boolean = false>(options: Options<ReadProdutoByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadProdutoByIdResponse, ReadProdutoByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/produtos/{id}',
        ...options
    });
};

/**
 * Read Vendas
 */
export const readVendas = <ThrowOnError extends boolean = false>(options?: Options<ReadVendasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadVendasResponse, ReadVendasError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas',
        ...options
    });
};

/**
 * Cadastrar Venda
 */
export const createVenda = <ThrowOnError extends boolean = false>(options: Options<CreateVendaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateVendaResponse, CreateVendaError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Count Vendas
 */
export const countVendas = <ThrowOnError extends boolean = false>(options?: Options<CountVendasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CountVendasResponse, CountVendasError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas/count',
        ...options
    });
};

/**
 * Read Venda
 */
export const readVendaById = <ThrowOnError extends boolean = false>(options: Options<ReadVendaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadVendaByIdResponse, ReadVendaByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/vendas/{id}',
        ...options
    });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponse, LoginError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Test Token
 * Test access token
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetCurrentUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/login/test-token',
        ...options
    });
};